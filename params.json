{"body":"### Simple unit test framework for Arduino.\r\nThis is a simple unit test framework for Arduino based on [UnitTest++](http://unittest-cpp.sourceforge.net/) by [Noel Llopis](http://gamesfromwithin.com/) and Charles Nicholson.\r\n\r\n### Example\r\nAn example project for [MariaMole](http://dalpix.com/mariamole) is provided [here](http://github.com/BlockoS/arduino-tests/tree/master/workspace/Arduino%20tests)\r\n```cpp\r\n#include <arduino.h>\r\n#include \"Dummy.h\"\r\n#include \"SerialNotifier.h\"\r\n\r\n// You must declare this in order to satisfy the grumpy avr-gcc C++ compiler.\r\nextern \"C\" void   atexit( void ) { } \r\n\r\nSUITE(TestSuite)\r\n{\r\n\tTEST(FirstTest)\r\n\t{\r\n\t\tint a = 1;\r\n\t\tCHECK(1, a);\r\n\t\tCHECK(\"bar\", \"foo\");\r\n\t}\r\n\r\n\tTEST(SecondTest)\r\n\t{\r\n\t\tCHECK(0, 1);\r\n\t\tCHECK(5, 2);\r\n\t}\r\n}\r\n\r\nvoid setup()\r\n{\r\n\tSerial.begin(9600);\r\n\t\r\n\tDummy::SerialNotifier notifier;\r\n\tDummy::Result res;\r\n\t\r\n\tres = Dummy::Runner::Instance().Run(&notifier); \r\n}\r\n\r\nvoid loop()\r\n{\r\n}\r\n```\r\nOnce the program is uploaded on the board, you may read the following on your serial terminal. As you may have noticed only 1 of the 4 test is successful.\r\n```\r\n...o tests\\source\\SerialTest.cpp:16 TestSuite:FirstTest expected=bar value=foo\r\n...o tests\\source\\SerialTest.cpp:21 TestSuite:SecondTest expected=0 value=1\r\n...o tests\\source\\SerialTest.cpp:22 TestSuite:SecondTest expected=5 value=2\r\nTest run: 2, failed: 2, errors: 3\r\n```\r\nYou can also add fixtures by declaring a class with 2 methods **Setup** and **Teardown**. These methods will be called respectively before and after the test. Use **TEST_FIXTURE** to declare a test with a fixture.\r\n```cpp\r\nclass SampleFixture\r\n{\r\n\tpublic:\r\n\t\tvoid Setup()\r\n\t\t{\r\n\t\t\tm_device.Open();\r\n\t\t\tm_device.Setup();\r\n\t\t\tm_device.WaitUntiReady();\r\n\t\t}\r\n\t\tvoid TearDown()\r\n\t\t{\r\n\t\t\tm_device.Close();\r\n\t\t}\r\n\tprotected:\r\n\t\tACMEDevice m_device;\r\n}\r\n\r\nSUITE(SampleSuite)\r\n{\r\n\tTEST_FIXTURE(TaccoTest, SampleFixture)\r\n\t{\r\n\t\tuint8_t data;\r\n\t\tuint8_t status;\r\n\t\tstatus = m_device.GetParameter(ACMEDevice::Tacco, data);\r\n\t\tCHECK(ACMEDevice::CorrectTacco, data);\r\n\t}\r\n\tTEST_FIXTURE(PizzaTest, SampleFixture)\r\n\t{\r\n\t\tchar pizzaName[32];\r\n\t\tuint8_t status;\r\n\t\tstatus = m_device.SetParameter(ACMEDevice::Pizza, \"Calzone\");\r\n\t\tCHECK(ACMEDevice::OK, status);\r\n\r\n\t\tstatus = m_device.GetParameter(ACMEDevice::Pizza, pizzaName);\r\n\t\tCHECK(\"Calzone\", pizzaName);\r\n\t}\r\n}\r\n```\r\n\r\n### Documentation\r\nThe documentation is available [here](http://blockos.github.com/arduino-tests/doxygen/html) (generated by [Doxygen](http://doxygen.org)). \r\n\r\n### Authors and Contributors\r\nVincent \"MooZ\" Cruz (cruz.vincent@gmail.com) (@BlockoS)\r\n","tagline":"A Simple unit test framework for Arduino based on UnitTest++ by Noel Llopis and Charles Nicholson.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Arduino-tests"}